N = input('enter number of nodes'); % get number of nodes *
Packet_size = input('enter the packet size') * 8; % get the packet size in bits %
T = input('enter the simulation time') * 10^-3; % get simulation time in s %
 total_time = 0;
 count = 0;
 good_time = 0;
 data_rate = 6 * 10^6; % 6 Mbps %
 packet_time = Packet_size / data_rate; % get packet time %
 slot_size = 9 * (10^-6); % 9 us %
 j = 1;
 simulation_count = 0;
 CW_min = 15;
 CW = 15;
collision_flag = 0;
 r = (randi([0,CW_min],N,1)) * 10^-6; % generate N random numbers and put them into an array %

 while total_time < T

 [M,I] = min(r); % find the node with the minimum counter and index of node %
 simulation_count = simulation_count + 1;

 for i = 1:N % check if there are more than one nodes with same minimum counter %
 if (M == r(i))
 count = count + 1;
 collision_index(j) = i;
 j = j + 1;
 end
 end

 if count > 1
 collision_flag = 1; % collision occured %
 end

 if collision_flag ~= 1
 good_time = good_time + packet_time;


 if CW < 1
 CW = 2;
 end
 r(I) = (randi([0,CW],1,1)) * 10^-6;
 else
 CW = CW * 2;
 for i = 1:N
 if (M == r(i))
 r(i) = (randi([0,CW],1,1)) * 10^-6;
 end
 end
 end

 total_time = total_time + packet_time;
 for i = 1:N
 for j = 1:size(collision_index)
 if(i ~= collision_index(j))
 r(i) = r(i) - slot_size;
 end
 end
 end
 count = 0;
 collision_flag = 0;
 end
utility = good_time / total_time;
fprintf('Number of Nodes: %d ; Packet Size: %d ; Simulation Time(s): %d \n Utilization: ',
N,Packet_size, T);
disp(utility);