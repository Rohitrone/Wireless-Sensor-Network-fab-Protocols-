 %This function simulate the concepts of Dynamic Source Routing   
%The function finds path from source node(node1) to destination node(node10)  
%The output of this function is the figure displaying network topology and  
%the selected path from source to destination,the average trust value of  
%the selected path and the number of hops  
clear;  
n1 =10;  
figure(1);  
clf;  
hold on;  
R =5; % node transmission range  
sor =1;%source node  
des =10;%destination node  
X = [1 2 3 4 8 6 7 9 10 10];%nodes' x coordinates  
Y = [6 2 5 8 5 1 10 2 8 5];%nodes' y coordinates  
Z =[1 1 0.7 0.4 0.1 0.1 0.1 1 1 1];%nodes' trust values  
   
   
%plotting network topology  
for i = 1:n1  
 plot(X(i), Y(i), '.');  
    text(X(i), Y(i), num2str(i));  
    for j = 1:n1  
        distance = sqrt((X(i) - X(j))^2 + (Y(i) - Y(j))^2);  
        if distance <= R % there is a link;  
            matrix(i, j) =1;    
            trust(i,j)=1-((Z(i)+Z(j))/2);  
            line([X(i) X(j)], [Y(i) Y(j)], 'LineStyle', ':');  
            matriz(i,j)=distance;  
        else  
            matrix(i, j) =inf;  
            trust(i,j)= inf;  
            matriz(i,j)=inf;  
        end;  
          
    end;  
end;  
  
for i=1:n1
    %initialize
    for j=i:n1       
        if(i==j)
    m(i,j)=0;
        else
            m(i,j)=randint(1,1,9);% fill matrix
            m(j,i)=m(i,j);% equal upper and lower triangular matrix
        end
    end
end
disp(m);
 i=1;
 x=1;
 temp=triu(m); %for coloring of the lines after computing path
 for i=1:n1
     for j=1:n1
         if(temp(i,j)~=0)
             lc(i,j)=x;      %just numbering in sequence for line count
             lc(j,i)=lc(i,j);
             x=x+1;      
         end
     end
 end
bg=biograph(triu(m),[],'showarrows','off','ShowWeights','on','EdgeTextColor',[0 0 1]);
view(bg);
over=0;
while(over==0)
from=input('Enter the source node no.: ');   %get inputs
to=input('Enter the destination node no.: ');
v=zeros(1,n1);%visited matrix
d=randint(1,n1,100);%distance to node matrix
p=zeros(1,n1);%previous node matrix
s=from;
v(s)=1;%mark from as visited and initialixe d and p with 0
d(s)=0;
p(s)=0;
stop=0;
while(stop~=n1)
stop=0;
for i=1:n1
    if(v(i)=1&&m(s,i)=0)
        if(d(s)+m(s,i)<d(i))%if smaller than previous value replace
            d(i)=m(s,i)+d(s);
            p(i)=s;
        end
    else
        stop=stop+1;
    end
end
tempmat=d;
for i=1:n1
    if(v(i)==1)
        tempmat(i)=100;%to find the next minimum
    end
end
[k z]=min(tempmat);
s=z;% next minimum node as source node
v(s)=1; % mark as visited
end

%%%%%%%%%%%%%%%%computation over%%%%%%%%%%%%%%%%%

no=1:n1;
fprintf('\nNodes:   ');
disp(no);
fprintf('Visited: ');
disp(v);
fprintf('Previous:');
disp(p);
i=1;
out=2;
dest(1)=to;
while(i==1)     %backtrace from destination to source
     to=p(to);
     dest(out)=to;
     out=out+1;
     if(to==from)
         i=0;
     end
end
bg=biograph(triu(m),[],'showarrows','off','ShowWeights','on','EdgeTextColor',[001]);
for i=1:out-1
set(bg.nodes(dest(i)), 'color', [1 0 0]);
set(bg.nodes(dest(1)),'color',[0 1 0]);
if(i<out-1)
set(bg.edges(lc(dest(i+1),dest(i))),'linecolor',[1 0 0]);
end
end
view(bg);
sample=input('Check Minimum distance for next instance y/n: ','s');
if(sample=='n')
    over=1;  
end
end
